//=============================================================================================
// U S A G E   ================================================================================
//=============================================================================================

task usage doLast { print """${'='*90}
Easy Rules Tutorials (https://github.com/j-easy/easy-rules/tree/master/easy-rules-tutorials)

NB: Use then terminal command 'TERM=dumb' OR '--console=plain' along  
    with  '--quiet' or '-q' to suppress Gradle build output lines.

 ./gradlew usage
    Prints the following usage to the console

 ./gradlew FizzBuzz
    Baseline FizzBuzz using code. (From: http://wiki.c2.com/?FizzBuzzTest)
    Prints the integers from 1 to 100.  For multiples of 3, print 'Fizz' instead 
    of the integer and for the multiples of 5, print 'Buzz'. For integers which are 
    multiples of both 3 and 5, print 'FizzBuzz'.
    
 ./gradlew FizzBuzzER
    FizzBuzz implementation using EasyRules.
    
 ./gradlew Simple
    Very simple EasyRules examples with one, always true, rule.
    
 ./gradlew HelloWorld --quiet --console=plain
    Obligatory 'Hello, world' example where the input is evaluated by a rule.
    
 ./gradlew Shop -P person=Tommy -P age=15 --quiet --console=plain
    Rule to evaluate drinking age (US 21); Name and age can be passed in via the command line
    or system properties; Default is 'Tom' at age '17'.

 ./gradlew Fire --quiet --console=plain
    Copied from DROOLS examples. Create some rooms with sprinklers, start some fires.
    The sprinklers will turn on and an alarm will be raised to notify the Fire Department.
    Put out the fires, the sprinklers will turn off and the alarm will be silenced.
 
 ./gradlew Discount -P transactions=5 --quiet --console=plain
    Copied from DROOLS examples. A customer selects and returns various items. A discount
    is applied or removed depending on the merchandise total at the end of each transaction. 
    Transactions are generated randomly.

 ./gradlew HonestPolitician
    Initialize with honest politicians and the people rejoice. Introduce big corporations
    and corrupt each politician.  How the people feel now?

 ./gradlew Weather -P isRaining=true --quiet --console=plain

 ./gradlew AirCo -P current=30  -P target=25 --quiet --console=plain
    Nice demo of the new 'InferenceRulesEngine'

 ./gradlew clean
  Remove all reports and artifacts from './$project.buildDir.name'

${'='*90}
"""}

//============================================================================================
// P L U G I N S   ===========================================================================
//============================================================================================

apply plugin: 'groovy'

//=============================================================================================
// C O N F I G U R A T I O N  =================================================================
//=============================================================================================

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = sourceCompatibility

//=============================================================================================
// R e p o s i t o r i e s   &   D e p e n d e n c i e s   ====================================
//=============================================================================================

repositories {
 	mavenLocal()
 	mavenCentral() 
    //maven { url 'https://oss.sonatype.org/content/repositories/snapshots'  } // Only for Snapshots
}

dependencies {

    def jeasy  = '3.2.0' // Oct 2018
    def groovy = '2.5.2' // Oct 2018
    def slf4j  = '1.7.25' 

	compile ([
        "org.jeasy:easy-rules-core:$jeasy",      
        "org.jeasy:easy-rules-mvel:$jeasy",
        "org.jeasy:easy-rules-support:$jeasy",    
        "org.codehaus.groovy:groovy:$groovy",
        "org.slf4j:slf4j-simple:$slf4j"
    ])

}

sourceSets {

    compile {
        groovy {
            srcDirs = ['src/main/groovy']
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4.1'
}

//============================================================================================
// R U N   T U T O R I A L S   ===============================================================
//============================================================================================

tasks.withType(JavaExec) {
    standardInput = System.in
    classpath = sourceSets.main.runtimeClasspath
}

task FizzBuzz (dependsOn: 'classes', type: JavaExec) {
    main = 'org.jeasy.groovy.tutorials.fizzbuzz.FizzBuzz'
}

task FizzBuzzER (dependsOn: 'classes', type: JavaExec) {
    main = 'org.jeasy.groovy.tutorials.fizzbuzz.FizzBuzzWithEasyRules'
}
task Simple (dependsOn: 'classes', type: JavaExec) {
    main = 'org.jeasy.groovy.tutorials.simple.Launcher'
}

task HelloWorld (dependsOn: 'classes', type: JavaExec) {
    main = 'org.jeasy.groovy.tutorials.helloworld.Launcher'
}

task Fire (dependsOn: 'classes', type: JavaExec) {
    main = 'org.jeasy.groovy.tutorials.fire.Launcher'
}

task Shop (dependsOn: 'classes', type: JavaExec) {
    main = 'org.jeasy.groovy.tutorials.shop.Launcher'
    args = [
        findProperty('person') ?: 'Tom', 
        findProperty('age') ?: '17'
    ]
}

task Discount (dependsOn: 'classes', type: JavaExec) {
    main = 'org.jeasy.groovy.tutorials.discount.Launcher'
    args = [
        findProperty('transactions') ?: '5'
    ] 
}

task HonestPolitician (dependsOn: 'classes', type: JavaExec) {
    main = 'org.jeasy.groovy.tutorials.honestpolitician.Launcher'
}


task Weather (dependsOn: 'classes', type: JavaExec) {
    main = 'org.jeasy.groovy.tutorials.weather.Launcher'
    args = [
        findProperty('isRaining') ?: 'true'
    ] 
}

task AirCo (dependsOn: 'classes', type: JavaExec) {
    main = 'org.jeasy.groovy.tutorials.airco.Launcher'
    args = [
        findProperty('current') ?: '30',
        findProperty('target') ?: '25'
    ] 
}


